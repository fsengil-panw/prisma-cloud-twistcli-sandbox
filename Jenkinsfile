pipeline {
    // Request a dynamic agent from the EC2 Spot Instance template you configured
    // The AMI for this agent must have Docker installed. Amazon Linux 2 is a good choice.
    agent {
        label 'ec2-spot-sandbox'
    }

    environment {
        // Securely load the Prisma Cloud URL from Jenkins credentials
        PRISMA_URL = credentials('prisma-console-url')
        // Define a name for the Docker image
        IMAGE_NAME = "myapp-analysis:${BUILD_NUMBER}"
    }

    stages {
        stage('Setup Analysis Environment') {
            steps {
                echo "Agent is running on a temporary EC2 Spot Instance."
                echo "Downloading twistcli from ${PRISMA_URL}..."

                // Use the Prisma Cloud credentials to download the twistcli tool
                withCredentials([usernamePassword(credentialsId: 'prisma-cloud-credentials', usernameVariable: 'PRISMA_USER', passwordVariable: 'PRISMA_PASS')]) {
                    sh """
                        curl -k -u \${PRISMA_USER}:\${PRISMA_PASS} \\
                             --output twistcli \${PRISMA_URL}/api/v1/util/twistcli
                        chmod a+x twistcli
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${IMAGE_NAME}"
                    // This assumes a Dockerfile is in the root of your repository
                    sh "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Run Prisma Cloud Sandbox Analysis') {
            steps {
                echo "Submitting image ${IMAGE_NAME} to Prisma Cloud Sandbox..."
                withCredentials([usernamePassword(credentialsId: 'prisma-cloud-credentials', usernameVariable: 'PRISMA_USER', passwordVariable: 'PRISMA_PASS')]) {
                    // Execute sandbox image scan. --output-file saves the JSON result.
                    script {
                        def scanResult = sh(
                            script: """
                                ./twistcli sandbox \\
                                  --address \${PRISMA_URL} \\
                                  --user \${PRISMA_USER} \\
                                  --password \${PRISMA_PASS} \\
                                  --analysis-type image \\
                                  --output-file prisma_report.json \\
                                  ${IMAGE_NAME}
                            """,
                            returnStatus: true
                        )

                        // twistcli exits with a non-zero status code if it finds issues
                        if (scanResult != 0) {
                            echo "Scan complete. Prisma Cloud detected potential issues."
                        } else {
                            echo "Scan complete. No issues detected by exit code."
                        }
                    }
                }
            }
        }

        stage('Process and Archive Results') {
            steps {
                script {
                    // Read the JSON report generated by twistcli
                    def report = readJSON file: 'prisma_report.json'
                    // The path to the verdict might vary slightly; adjust if needed
                    def verdict = report.results[0].malware.verdict

                    echo "Prisma Cloud Sandbox Verdict: \${verdict}"

                    // Save the report as a build artifact for later review
                    archiveArtifacts artifacts: 'prisma_report.json', followSymlinks: false

                    // Fail the pipeline if the verdict is definitively 'malware'
                    if (verdict == 'malware') {
                        error("PIPELINE FAILED: Prisma Cloud identified the image as containing malware.")
                    }
                }
            }
        }
    }
    
    // The Jenkins EC2 plugin automatically terminates the agent (the Spot Instance)
    // as soon as the pipeline job is finished.
}